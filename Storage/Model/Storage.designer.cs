#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Storage.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Storage")]
	public partial class StorageDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertBatch(Batch instance);
    partial void UpdateBatch(Batch instance);
    partial void DeleteBatch(Batch instance);
    partial void InsertPit(Pit instance);
    partial void UpdatePit(Pit instance);
    partial void DeletePit(Pit instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertCurrentPort(CurrentPort instance);
    partial void UpdateCurrentPort(CurrentPort instance);
    partial void DeleteCurrentPort(CurrentPort instance);
    partial void InsertExport(Export instance);
    partial void UpdateExport(Export instance);
    partial void DeleteExport(Export instance);
    partial void InsertImport(Import instance);
    partial void UpdateImport(Import instance);
    partial void DeleteImport(Import instance);
    partial void InsertKind(Kind instance);
    partial void UpdateKind(Kind instance);
    partial void DeleteKind(Kind instance);
    #endregion
		
		public StorageDataContext() : 
				base(global::Storage.Properties.Settings.Default.StorageConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StorageDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StorageDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StorageDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StorageDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Batch> Batch
		{
			get
			{
				return this.GetTable<Batch>();
			}
		}
		
		public System.Data.Linq.Table<Pit> Pit
		{
			get
			{
				return this.GetTable<Pit>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contact
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<CurrentPort> CurrentPort
		{
			get
			{
				return this.GetTable<CurrentPort>();
			}
		}
		
		public System.Data.Linq.Table<Export> Export
		{
			get
			{
				return this.GetTable<Export>();
			}
		}
		
		public System.Data.Linq.Table<Import> Import
		{
			get
			{
				return this.GetTable<Import>();
			}
		}
		
		public System.Data.Linq.Table<Kind> Kind
		{
			get
			{
				return this.GetTable<Kind>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Batch")]
	public partial class Batch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<double> _Size;
		
		private System.Nullable<bool> _InOut;
		
		private string _Note;
		
		private System.Nullable<int> _ContactID;
		
		private EntitySet<CurrentPort> _CurrentPort;
		
		private EntitySet<Export> _Export;
		
		private EntitySet<Import> _Import;
		
		private EntityRef<Contact> _Contact;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSizeChanging(System.Nullable<double> value);
    partial void OnSizeChanged();
    partial void OnInOutChanging(System.Nullable<bool> value);
    partial void OnInOutChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    #endregion
		
		public Batch()
		{
			this._CurrentPort = new EntitySet<CurrentPort>(new Action<CurrentPort>(this.attach_CurrentPort), new Action<CurrentPort>(this.detach_CurrentPort));
			this._Export = new EntitySet<Export>(new Action<Export>(this.attach_Export), new Action<Export>(this.detach_Export));
			this._Import = new EntitySet<Import>(new Action<Import>(this.attach_Import), new Action<Import>(this.detach_Import));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Float")]
		public System.Nullable<double> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InOut", DbType="Bit")]
		public System.Nullable<bool> InOut
		{
			get
			{
				return this._InOut;
			}
			set
			{
				if ((this._InOut != value))
				{
					this.OnInOutChanging(value);
					this.SendPropertyChanging();
					this._InOut = value;
					this.SendPropertyChanged("InOut");
					this.OnInOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_CurrentPort", Storage="_CurrentPort", ThisKey="ID", OtherKey="BatchID")]
		public EntitySet<CurrentPort> CurrentPort
		{
			get
			{
				return this._CurrentPort;
			}
			set
			{
				this._CurrentPort.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_Export", Storage="_Export", ThisKey="ID", OtherKey="BatchID")]
		public EntitySet<Export> Export
		{
			get
			{
				return this._Export;
			}
			set
			{
				this._Export.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_Import", Storage="_Import", ThisKey="ID", OtherKey="BatchID")]
		public EntitySet<Import> Import
		{
			get
			{
				return this._Import;
			}
			set
			{
				this._Import.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Batch", Storage="_Contact", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Batch = null;
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Batch = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CurrentPort(CurrentPort entity)
		{
			this.SendPropertyChanging();
			entity.Batch = this;
		}
		
		private void detach_CurrentPort(CurrentPort entity)
		{
			this.SendPropertyChanging();
			entity.Batch = null;
		}
		
		private void attach_Export(Export entity)
		{
			this.SendPropertyChanging();
			entity.Batch = this;
		}
		
		private void detach_Export(Export entity)
		{
			this.SendPropertyChanging();
			entity.Batch = null;
		}
		
		private void attach_Import(Import entity)
		{
			this.SendPropertyChanging();
			entity.Batch = this;
		}
		
		private void detach_Import(Import entity)
		{
			this.SendPropertyChanging();
			entity.Batch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pit")]
	public partial class Pit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Number;
		
		private System.Nullable<double> _Size;
		
		private string _Note;
		
		private EntitySet<CurrentPort> _CurrentPort;
		
		private EntitySet<Export> _Export;
		
		private EntitySet<Import> _Import;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    partial void OnSizeChanging(System.Nullable<double> value);
    partial void OnSizeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Pit()
		{
			this._CurrentPort = new EntitySet<CurrentPort>(new Action<CurrentPort>(this.attach_CurrentPort), new Action<CurrentPort>(this.detach_CurrentPort));
			this._Export = new EntitySet<Export>(new Action<Export>(this.attach_Export), new Action<Export>(this.detach_Export));
			this._Import = new EntitySet<Import>(new Action<Import>(this.attach_Import), new Action<Import>(this.detach_Import));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Float")]
		public System.Nullable<double> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pit_CurrentPort", Storage="_CurrentPort", ThisKey="ID", OtherKey="PitID")]
		public EntitySet<CurrentPort> CurrentPort
		{
			get
			{
				return this._CurrentPort;
			}
			set
			{
				this._CurrentPort.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pit_Export", Storage="_Export", ThisKey="ID", OtherKey="PitID")]
		public EntitySet<Export> Export
		{
			get
			{
				return this._Export;
			}
			set
			{
				this._Export.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pit_Import", Storage="_Import", ThisKey="ID", OtherKey="PitID")]
		public EntitySet<Import> Import
		{
			get
			{
				return this._Import;
			}
			set
			{
				this._Import.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CurrentPort(CurrentPort entity)
		{
			this.SendPropertyChanging();
			entity.Pit = this;
		}
		
		private void detach_CurrentPort(CurrentPort entity)
		{
			this.SendPropertyChanging();
			entity.Pit = null;
		}
		
		private void attach_Export(Export entity)
		{
			this.SendPropertyChanging();
			entity.Pit = this;
		}
		
		private void detach_Export(Export entity)
		{
			this.SendPropertyChanging();
			entity.Pit = null;
		}
		
		private void attach_Import(Import entity)
		{
			this.SendPropertyChanging();
			entity.Pit = this;
		}
		
		private void detach_Import(Import entity)
		{
			this.SendPropertyChanging();
			entity.Pit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Identity;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Note;
		
		private EntityRef<Batch> _Batch;
		
		private EntitySet<CurrentPort> _CurrentPort;
		
		private EntitySet<Export> _Export;
		
		private EntitySet<Import> _Import;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentityChanging(string value);
    partial void OnIdentityChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Contact()
		{
			this._Batch = default(EntityRef<Batch>);
			this._CurrentPort = new EntitySet<CurrentPort>(new Action<CurrentPort>(this.attach_CurrentPort), new Action<CurrentPort>(this.detach_CurrentPort));
			this._Export = new EntitySet<Export>(new Action<Export>(this.attach_Export), new Action<Export>(this.detach_Export));
			this._Import = new EntitySet<Import>(new Action<Import>(this.attach_Import), new Action<Import>(this.detach_Import));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Identity]", Storage="_Identity", DbType="NChar(18)")]
		public string Identity
		{
			get
			{
				return this._Identity;
			}
			set
			{
				if ((this._Identity != value))
				{
					this.OnIdentityChanging(value);
					this.SendPropertyChanging();
					this._Identity = value;
					this.SendPropertyChanged("Identity");
					this.OnIdentityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NChar(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Batch", Storage="_Batch", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Batch Batch
		{
			get
			{
				return this._Batch.Entity;
			}
			set
			{
				Batch previousValue = this._Batch.Entity;
				if (((previousValue != value) 
							|| (this._Batch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch.Entity = null;
						previousValue.Contact = null;
					}
					this._Batch.Entity = value;
					if ((value != null))
					{
						value.Contact = this;
					}
					this.SendPropertyChanged("Batch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_CurrentPort", Storage="_CurrentPort", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<CurrentPort> CurrentPort
		{
			get
			{
				return this._CurrentPort;
			}
			set
			{
				this._CurrentPort.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Export", Storage="_Export", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<Export> Export
		{
			get
			{
				return this._Export;
			}
			set
			{
				this._Export.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Import", Storage="_Import", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<Import> Import
		{
			get
			{
				return this._Import;
			}
			set
			{
				this._Import.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CurrentPort(CurrentPort entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_CurrentPort(CurrentPort entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Export(Export entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Export(Export entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Import(Import entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Import(Import entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentPort")]
	public partial class CurrentPort : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ContactID;
		
		private System.Nullable<int> _BatchID;
		
		private System.Nullable<int> _PitID;
		
		private System.Nullable<int> _KindID;
		
		private System.Nullable<double> _Size;
		
		private EntityRef<Batch> _Batch;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Pit> _Pit;
		
		private EntityRef<Kind> _Kind;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    partial void OnBatchIDChanging(System.Nullable<int> value);
    partial void OnBatchIDChanged();
    partial void OnPitIDChanging(System.Nullable<int> value);
    partial void OnPitIDChanged();
    partial void OnKindIDChanging(System.Nullable<int> value);
    partial void OnKindIDChanged();
    partial void OnSizeChanging(System.Nullable<double> value);
    partial void OnSizeChanged();
    #endregion
		
		public CurrentPort()
		{
			this._Batch = default(EntityRef<Batch>);
			this._Contact = default(EntityRef<Contact>);
			this._Pit = default(EntityRef<Pit>);
			this._Kind = default(EntityRef<Kind>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchID", DbType="Int")]
		public System.Nullable<int> BatchID
		{
			get
			{
				return this._BatchID;
			}
			set
			{
				if ((this._BatchID != value))
				{
					if (this._Batch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchIDChanging(value);
					this.SendPropertyChanging();
					this._BatchID = value;
					this.SendPropertyChanged("BatchID");
					this.OnBatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PitID", DbType="Int")]
		public System.Nullable<int> PitID
		{
			get
			{
				return this._PitID;
			}
			set
			{
				if ((this._PitID != value))
				{
					if (this._Pit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPitIDChanging(value);
					this.SendPropertyChanging();
					this._PitID = value;
					this.SendPropertyChanged("PitID");
					this.OnPitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindID", DbType="Int")]
		public System.Nullable<int> KindID
		{
			get
			{
				return this._KindID;
			}
			set
			{
				if ((this._KindID != value))
				{
					if (this._Kind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKindIDChanging(value);
					this.SendPropertyChanging();
					this._KindID = value;
					this.SendPropertyChanged("KindID");
					this.OnKindIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Float")]
		public System.Nullable<double> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_CurrentPort", Storage="_Batch", ThisKey="BatchID", OtherKey="ID", IsForeignKey=true)]
		public Batch Batch
		{
			get
			{
				return this._Batch.Entity;
			}
			set
			{
				Batch previousValue = this._Batch.Entity;
				if (((previousValue != value) 
							|| (this._Batch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch.Entity = null;
						previousValue.CurrentPort.Remove(this);
					}
					this._Batch.Entity = value;
					if ((value != null))
					{
						value.CurrentPort.Add(this);
						this._BatchID = value.ID;
					}
					else
					{
						this._BatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Batch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_CurrentPort", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.CurrentPort.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.CurrentPort.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pit_CurrentPort", Storage="_Pit", ThisKey="PitID", OtherKey="ID", IsForeignKey=true)]
		public Pit Pit
		{
			get
			{
				return this._Pit.Entity;
			}
			set
			{
				Pit previousValue = this._Pit.Entity;
				if (((previousValue != value) 
							|| (this._Pit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pit.Entity = null;
						previousValue.CurrentPort.Remove(this);
					}
					this._Pit.Entity = value;
					if ((value != null))
					{
						value.CurrentPort.Add(this);
						this._PitID = value.ID;
					}
					else
					{
						this._PitID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_CurrentPort", Storage="_Kind", ThisKey="KindID", OtherKey="ID", IsForeignKey=true)]
		public Kind Kind
		{
			get
			{
				return this._Kind.Entity;
			}
			set
			{
				Kind previousValue = this._Kind.Entity;
				if (((previousValue != value) 
							|| (this._Kind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kind.Entity = null;
						previousValue.CurrentPort.Remove(this);
					}
					this._Kind.Entity = value;
					if ((value != null))
					{
						value.CurrentPort.Add(this);
						this._KindID = value.ID;
					}
					else
					{
						this._KindID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Kind");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Export")]
	public partial class Export : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<double> _Size;
		
		private System.Nullable<System.DateTime> _Time;
		
		private System.Nullable<int> _ContactID;
		
		private System.Nullable<int> _BatchID;
		
		private System.Nullable<int> _PitID;
		
		private System.Nullable<int> _KindID;
		
		private string _Note;
		
		private EntityRef<Batch> _Batch;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Pit> _Pit;
		
		private EntityRef<Kind> _Kind;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSizeChanging(System.Nullable<double> value);
    partial void OnSizeChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    partial void OnBatchIDChanging(System.Nullable<int> value);
    partial void OnBatchIDChanged();
    partial void OnPitIDChanging(System.Nullable<int> value);
    partial void OnPitIDChanged();
    partial void OnKindIDChanging(System.Nullable<int> value);
    partial void OnKindIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Export()
		{
			this._Batch = default(EntityRef<Batch>);
			this._Contact = default(EntityRef<Contact>);
			this._Pit = default(EntityRef<Pit>);
			this._Kind = default(EntityRef<Kind>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Float")]
		public System.Nullable<double> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchID", DbType="Int")]
		public System.Nullable<int> BatchID
		{
			get
			{
				return this._BatchID;
			}
			set
			{
				if ((this._BatchID != value))
				{
					if (this._Batch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchIDChanging(value);
					this.SendPropertyChanging();
					this._BatchID = value;
					this.SendPropertyChanged("BatchID");
					this.OnBatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PitID", DbType="Int")]
		public System.Nullable<int> PitID
		{
			get
			{
				return this._PitID;
			}
			set
			{
				if ((this._PitID != value))
				{
					if (this._Pit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPitIDChanging(value);
					this.SendPropertyChanging();
					this._PitID = value;
					this.SendPropertyChanged("PitID");
					this.OnPitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindID", DbType="Int")]
		public System.Nullable<int> KindID
		{
			get
			{
				return this._KindID;
			}
			set
			{
				if ((this._KindID != value))
				{
					if (this._Kind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKindIDChanging(value);
					this.SendPropertyChanging();
					this._KindID = value;
					this.SendPropertyChanged("KindID");
					this.OnKindIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_Export", Storage="_Batch", ThisKey="BatchID", OtherKey="ID", IsForeignKey=true)]
		public Batch Batch
		{
			get
			{
				return this._Batch.Entity;
			}
			set
			{
				Batch previousValue = this._Batch.Entity;
				if (((previousValue != value) 
							|| (this._Batch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch.Entity = null;
						previousValue.Export.Remove(this);
					}
					this._Batch.Entity = value;
					if ((value != null))
					{
						value.Export.Add(this);
						this._BatchID = value.ID;
					}
					else
					{
						this._BatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Batch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Export", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Export.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Export.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pit_Export", Storage="_Pit", ThisKey="PitID", OtherKey="ID", IsForeignKey=true)]
		public Pit Pit
		{
			get
			{
				return this._Pit.Entity;
			}
			set
			{
				Pit previousValue = this._Pit.Entity;
				if (((previousValue != value) 
							|| (this._Pit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pit.Entity = null;
						previousValue.Export.Remove(this);
					}
					this._Pit.Entity = value;
					if ((value != null))
					{
						value.Export.Add(this);
						this._PitID = value.ID;
					}
					else
					{
						this._PitID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Export", Storage="_Kind", ThisKey="KindID", OtherKey="ID", IsForeignKey=true)]
		public Kind Kind
		{
			get
			{
				return this._Kind.Entity;
			}
			set
			{
				Kind previousValue = this._Kind.Entity;
				if (((previousValue != value) 
							|| (this._Kind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kind.Entity = null;
						previousValue.Export.Remove(this);
					}
					this._Kind.Entity = value;
					if ((value != null))
					{
						value.Export.Add(this);
						this._KindID = value.ID;
					}
					else
					{
						this._KindID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Kind");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Import")]
	public partial class Import : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<double> _Size;
		
		private System.Nullable<System.DateTime> _Time;
		
		private System.Nullable<int> _ContactID;
		
		private System.Nullable<int> _BatchID;
		
		private System.Nullable<int> _PitID;
		
		private System.Nullable<int> _KindID;
		
		private string _Note;
		
		private EntityRef<Batch> _Batch;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Pit> _Pit;
		
		private EntityRef<Kind> _Kind;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSizeChanging(System.Nullable<double> value);
    partial void OnSizeChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    partial void OnBatchIDChanging(System.Nullable<int> value);
    partial void OnBatchIDChanged();
    partial void OnPitIDChanging(System.Nullable<int> value);
    partial void OnPitIDChanged();
    partial void OnKindIDChanging(System.Nullable<int> value);
    partial void OnKindIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Import()
		{
			this._Batch = default(EntityRef<Batch>);
			this._Contact = default(EntityRef<Contact>);
			this._Pit = default(EntityRef<Pit>);
			this._Kind = default(EntityRef<Kind>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Float")]
		public System.Nullable<double> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchID", DbType="Int")]
		public System.Nullable<int> BatchID
		{
			get
			{
				return this._BatchID;
			}
			set
			{
				if ((this._BatchID != value))
				{
					if (this._Batch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchIDChanging(value);
					this.SendPropertyChanging();
					this._BatchID = value;
					this.SendPropertyChanged("BatchID");
					this.OnBatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PitID", DbType="Int")]
		public System.Nullable<int> PitID
		{
			get
			{
				return this._PitID;
			}
			set
			{
				if ((this._PitID != value))
				{
					if (this._Pit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPitIDChanging(value);
					this.SendPropertyChanging();
					this._PitID = value;
					this.SendPropertyChanged("PitID");
					this.OnPitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindID", DbType="Int")]
		public System.Nullable<int> KindID
		{
			get
			{
				return this._KindID;
			}
			set
			{
				if ((this._KindID != value))
				{
					if (this._Kind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKindIDChanging(value);
					this.SendPropertyChanging();
					this._KindID = value;
					this.SendPropertyChanged("KindID");
					this.OnKindIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_Import", Storage="_Batch", ThisKey="BatchID", OtherKey="ID", IsForeignKey=true)]
		public Batch Batch
		{
			get
			{
				return this._Batch.Entity;
			}
			set
			{
				Batch previousValue = this._Batch.Entity;
				if (((previousValue != value) 
							|| (this._Batch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch.Entity = null;
						previousValue.Import.Remove(this);
					}
					this._Batch.Entity = value;
					if ((value != null))
					{
						value.Import.Add(this);
						this._BatchID = value.ID;
					}
					else
					{
						this._BatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Batch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Import", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Import.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Import.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pit_Import", Storage="_Pit", ThisKey="PitID", OtherKey="ID", IsForeignKey=true)]
		public Pit Pit
		{
			get
			{
				return this._Pit.Entity;
			}
			set
			{
				Pit previousValue = this._Pit.Entity;
				if (((previousValue != value) 
							|| (this._Pit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pit.Entity = null;
						previousValue.Import.Remove(this);
					}
					this._Pit.Entity = value;
					if ((value != null))
					{
						value.Import.Add(this);
						this._PitID = value.ID;
					}
					else
					{
						this._PitID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Import", Storage="_Kind", ThisKey="KindID", OtherKey="ID", IsForeignKey=true)]
		public Kind Kind
		{
			get
			{
				return this._Kind.Entity;
			}
			set
			{
				Kind previousValue = this._Kind.Entity;
				if (((previousValue != value) 
							|| (this._Kind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kind.Entity = null;
						previousValue.Import.Remove(this);
					}
					this._Kind.Entity = value;
					if ((value != null))
					{
						value.Import.Add(this);
						this._KindID = value.ID;
					}
					else
					{
						this._KindID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Kind");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kind")]
	public partial class Kind : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Note;
		
		private EntitySet<CurrentPort> _CurrentPort;
		
		private EntitySet<Export> _Export;
		
		private EntitySet<Import> _Import;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Kind()
		{
			this._CurrentPort = new EntitySet<CurrentPort>(new Action<CurrentPort>(this.attach_CurrentPort), new Action<CurrentPort>(this.detach_CurrentPort));
			this._Export = new EntitySet<Export>(new Action<Export>(this.attach_Export), new Action<Export>(this.detach_Export));
			this._Import = new EntitySet<Import>(new Action<Import>(this.attach_Import), new Action<Import>(this.detach_Import));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_CurrentPort", Storage="_CurrentPort", ThisKey="ID", OtherKey="KindID")]
		public EntitySet<CurrentPort> CurrentPort
		{
			get
			{
				return this._CurrentPort;
			}
			set
			{
				this._CurrentPort.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Export", Storage="_Export", ThisKey="ID", OtherKey="KindID")]
		public EntitySet<Export> Export
		{
			get
			{
				return this._Export;
			}
			set
			{
				this._Export.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Import", Storage="_Import", ThisKey="ID", OtherKey="KindID")]
		public EntitySet<Import> Import
		{
			get
			{
				return this._Import;
			}
			set
			{
				this._Import.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CurrentPort(CurrentPort entity)
		{
			this.SendPropertyChanging();
			entity.Kind = this;
		}
		
		private void detach_CurrentPort(CurrentPort entity)
		{
			this.SendPropertyChanging();
			entity.Kind = null;
		}
		
		private void attach_Export(Export entity)
		{
			this.SendPropertyChanging();
			entity.Kind = this;
		}
		
		private void detach_Export(Export entity)
		{
			this.SendPropertyChanging();
			entity.Kind = null;
		}
		
		private void attach_Import(Import entity)
		{
			this.SendPropertyChanging();
			entity.Kind = this;
		}
		
		private void detach_Import(Import entity)
		{
			this.SendPropertyChanging();
			entity.Kind = null;
		}
	}
}
#pragma warning restore 1591
